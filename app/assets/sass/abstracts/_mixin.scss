//*****************************
//	Typography 
//*****************************

// $up: Uppercase;
// $cpt: Capitalize;
@mixin link($color, $hvr-color, $fsz: 16, $fw: 400, $lh: 1, $up: false, $cpt: false) {
	color: setColor($color);
	font-size: remCal($fsz);
	text-decoration: none;
	cursor: pointer;
	&:hover {
  		color: setColor($hvr-color);
	}
	//Transition
	@include prefix(transition, $transition)
	//Font weight
	@if $fw == 700 {
		font-family: cambria-bold;
	}
	@else {
		font-family: cambria-regular;
	}
	//Line height
	@if $lh == 1 {
		line-height: goldLineHeight($fsz);
	}
	@else if $lh == 0 {
		line-height: 1;
	}
	@else {
		line-height: remCal($lh)
	}  	
	//Text decoration
	@if $up {
   		text-transform: uppercase;
	} 
	@if $cpt {
  		text-transform: capitalize;
  	}
}

@mixin typo($color: #000, $fsz: 16, $fw: 400, $lh: 1, $up: false, $cpt: false) {
	color: setColor($color);
	font-size: remCal($fsz);
	//Font weight
	@if $fw == 700 {
		font-family: cambria-bold;
	}
	@else {
		font-family: cambria-regular;
	}
	//Line height
	@if $lh == 1 {
		line-height: goldLineHeight($fsz);
	}
	@else if $lh == 0 {
		line-height: 1;
	}
	@else {
		line-height: remCal($lh);
	}
	//Text decoration
	@if $up {
	   	text-transform: uppercase;
  	} 
  	@if $cpt {
  		text-transform: capitalize;
  	}
}

//Text line limit
@mixin text-limit($line-to-show,$lh,$max-height: $line-to-show*$lh) {
	overflow: hidden;
   	text-overflow: ellipsis;
	display: -webkit-box!important;
	-webkit-box-orient: vertical;
	-webkit-line-clamp: $line-to-show; /* number of lines to show */
	line-height: $lh;        /* fallback */
	max-height: $max-height;       /* fallback */
}

@mixin trim-margin {
	&:first-child {
		margin-left: 0;
	}
	&:last-child {
		margin-right: 0;
	}
}

//*****************************
//	Button
//*****************************

@mixin button($pd: remCal(15) remCal(35),
			$bg-color: white,
			$hvr-color: white,
			$color: base,
			$hvr-bg-color: base,
			$border-color: base,
			$hvr-border-color: base,
			$fsz: 16,
			$btn-rd: 999px,
			$border-thick: 2) {
	cursor: pointer;
	background-color: setColor($bg-color);
	text-transform: capitalize;
	border: remCal($border-thick) solid setColor($border-color);
	display: inline-block;
	padding: $pd;
	text-decoration: none;
	z-index: 1;
	text-align: center;
	@include typo($color: $color, $fsz: $fsz, $fw: 700, $lh: 0);
	@include prefix(border-radius, $btn-rd);
	@include prefix(transition, $transition)
	&:hover {
		color: setColor($hvr-color);
		background-color: setColor($hvr-bg-color);
		border: $border-thick solid setColor($hvr-border-color);
		text-decoration: none;
	}
	&:focus {
		outline: 0;
		box-shadow: 0;
	}
} 

//*****************************
//	Form
//*****************************

// $brd: Boreder-radius;

//Input
@mixin input($borer-color, $fsz: 16, $fw: 400,$pd-ver:15,$pd-hoz:15,$width: 100%,$height: auto,$brd: 0px) {
	background-color: setColor(trans);
	border: 1px solid $borer-color;
	height: remCal($height);
	width: $width;
	transition: $transition;
	-webkit-appearance: none;
	padding: {
		top: remCal($pd-ver);
		bottom: remCal($pd-ver);
		right: remCal($pd-hoz);
		left: remCal($pd-hoz);
	}
	&:focus {
		outline: 0;
		box-shadow: none;
		border-color: setColor(base);
	}
	@include typo($fsz: $fsz,$lh: $height, $fw: $fw);
	@include prefix(border-radius, $brd);
	
	@include input-pseudo-class {
		@include typo($fsz: $fsz, $lh: $height, $fw: $fw,$color: #aeaeae);
	}
}

//Textarea
@mixin textarea($pd-ver:15,$pd-hoz:15,$border: #CFCFCF,$width: 100%,$height: auto,$brd: 0px) {
	background-color: setColor(trans);
	border: 1px solid setColor($border);
	height: remCal($height);
	width: $width;
	transition: $transition;
    font-family: inherit;
	-webkit-appearance: none;
	resize: none;
	padding: {
		top: remCal($pd-ver);
		bottom: remCal($pd-ver);
		right: remCal($pd-hoz);
		left: remCal($pd-hoz);
	}
	&:focus {
		outline: 0;
		box-shadow: none;
		border: 1px solid setColor(base);
	}
	@include typo($lh: $height);
	@include prefix(border-radius, $brd);
	@include pseudo-class {
		@include typo($lh: $height,$color: #aeaeae);
	}
}


//Select
@mixin select($pd-hoz: 15, $pd-ver: 15, $border: base, $width: 100%,$brd: 999px,$height: auto,$default:false) {
	background-color: setColor(trans);
	border: 1px solid setColor($border);
	height: remCal($height);
	width: $width;
	transition: $transition;
	position: relative;
	padding: {
		right: remCal($pd-hoz);
		left: remCal($pd-hoz);
		top: remCal($pd-ver);
		bottom: remCal($pd-ver);
	}
	&:focus {
		outline: 0;
		box-shadow: none;
		border: 1px solid setColor(base);
	}
	@if $default == false {
		-webkit-appearance: none;
		background: {
			image: url('../images/chevron-down.svg');
			size: remCal(10);
			position: calc(100% - 15px) center;
			repeat: no-repeat;
		}
	}
	@include typo($lh: $height, $fsz: 16);
	@include prefix(border-radius, $brd);
	
}

//*****************************
//	Cross-browser
//*****************************
@mixin prefix($property, $value) {
  	@each $prefix in $prefixes {
   		#{'-' + $prefix + '-' + $property}: $value;
  	}
  	// Output standard non-prefixed declaration
  	#{$property}: $value;
}

@mixin input-pseudo-class() {
    @each $prefix in $prefixes { 
      @if $prefix == 'moz' {
	    #{'&:-' + $prefix + '-' + 'input-placeholder'} {@content; line-height: -moz-block-height };
      	#{'&::-' + $prefix + '-' + 'input-placeholder'} {@content; line-height: -moz-block-height };
	  }
	  @else {
	  	#{'&:-' + $prefix + '-' + 'input-placeholder'} {@content};
      	#{'&::-' + $prefix + '-' + 'input-placeholder'} {@content};
	  }
    }
    &:input-placeholder {@content};
    &::input-placeholder {@content};
}

@mixin pseudo-class() {
	@each $prefix in $prefixes {
      	#{'&::-' + $prefix + '-' + 'placeholder'} {@content};
	}
	&::placeholder {@content};
}

//*****************************
//	Responsive
//*****************************


 
// Respond-To Mixin
@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $value: map-get($breakpoints, $breakpoint);
        @media screen and (max-width: $value) {
            @content;
        }
    }
    @else {
    	@warn "Unknown `#{$breakpoint}` in $breakpoints";
    }
}


@mixin mobile {
	@include respond-to(sm) {
		@content;
	}
}

@mixin tablet {
	@include respond-to(md) {
		@content;
	}
}

@mixin small-desktop {
	@include respond-to(lg) {
		@content;
	}
}

@mixin desktop {
	@include respond-to(xl) {
		@content;
	}
}

@mixin large-desktop {
	@include respond-to(xxl) {
		@content;
	}
}